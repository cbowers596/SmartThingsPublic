/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "03.05.01"
}

/**
* 5-2 Day Thermostat with Remote Sensor
*
* Copyright RBoy Apps, redistribution or reuse of code is not allowed without permission
*
* 2017-9-9 - (v03.05.01) Updated min temp to 60F for better GoControl thermostat compatibility
* 2017-9-5 - (v03.05.00) Updated min/max thresholds for remote sensors to be compatible with new ST thermostat device handler (deadZones)
* 2017-7-7 - (v03.04.02) Added option to manually reinitiate thermostat by clicking the "Arrow" button
* 2017-7-7 - (v03.04.01) Added support for temporary hold mode even when not using a remote temperature sensor and added option to manually reinitiate thermostat by clicking the "Arrow" button
* 2017-3-14 - (v3.4.0) Added support for using heating and cooling appliances instead of a thermostat
* 2017-2-1 - (v3.3.1) Added ability for temporary hold when using remote temperature sensors
* 2016-11-2 - Added ability to select multiple remote temperature sensors and average them out and ability to check for DH and SA updates and notify user
* 2016-10-9 - Tweak the threshold setting to help compensate for sensors which update with lower accuracy
* 2016-9-2 - Made fan setting optional
* 2016-8-30 - Added support for remote temp sensors for each schedule and also ability to set fan mode for each schedule, optimize settings to reduce impact on battery
* 2016-6-13 - Choosing thermostats is optional so that it can be temporatily disabled
* 2016-5-24 - Used new scheduling mechanisms since runOnce keeps getting dropped by the scheduler
* 2016-5-17 - Fix for potential app dying due to platform timeout
* 2016-5-15 - Notify use if timezone/location is missing in setup
* 2016-2-8 - Modes are now controlled by ST platform, app will only operate in designated modes (including turning off)
* 2016-2-7 - Set temp only if it needs to be changed to save thermostat battery
* 2016-1-28 - Added ability to rename app
* 2016-1-28 - Fixed an issue where the modes weren't functioning properly
* 2016-1-11 - Fixed a bug introduced with remote temperature sensors feature which caused any manual overrides on the thermostat to be overwritten by the app before the end of the current schedule
* 2016-1-4 - Added support for using a remote temperature sensor to control the thermostat
* 2016-1-4 - Added hideable sections to make it more readable
* 2016-1-4 - Added external events to kick start timers to compensate for buggy platform timers dying
* 2015-10-3 - Fixed an issue with selecting multiple thermostats and for recent platform changes
* 2015-5-17 - Added ability to select mutiple thermostats simultaneously
* 2015-2-11 - Fixed issue with fan mode
*
*/
definition(
    name: "5-2 Day Thermostat with Remote Sensor",
    namespace: "rboy",
    author: "RBoy Apps",
    description: "Weekday and Weekend Thermostat with Remote Temperature Sensor Option",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@3x.png")

preferences {
    page(name: "mainPage")
    page(name: "scheduleWeek")
}

def mainPage() {
    dynamicPage(name: "mainPage", title: "5-2 Day Thermostat with Remote Sensor v${clientVersion()}", nextPage: "scheduleWeek", install: false, uninstall: true) {
        TimeZone timeZone = location.timeZone
        if (!timeZone) {
            timeZone = TimeZone.getDefault()
            log.error "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            sendPush "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            section("INVALID HUB LOCATION") {
                paragraph "Hub location/timezone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
            }
        }

        section("Choose temperature control devices") {
            if (!(coolers || heaters)) {
                paragraph "Select thermostat to control temperature"
                input "thermostats", "capability.thermostat", title: "Thermostat(s)", required: false, multiple:true, submitOnChange: true
            }
            if (!(coolers || heaters || thermostats)) {
                paragraph "** OR **"
            }
            if (!thermostats) {
                paragraph "Select heating and cooling applicances to control temperature"
                input "coolers", "capability.switch", title: "Use these coolers(s)", required: false, multiple:true, submitOnChange: true
                input "heaters", "capability.switch", title: "Use these heaters(s)", required: false, multiple:true, submitOnChange: true
            }
        }

        section("Use remote temperature sensor to control thermostat (optional)", hidden: false, hideable: false) {
            paragraph "You can use a remote sensor instead of the built in thermostat temperature sensor to monitor the temperature. You can also configure the app to use a separate remote sensor for each schedule or use a single sensor for all schedules"
            if (!customRemoteTempSensor) {
                if ((remoteTemperatureSensor*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor", "capability.temperatureMeasurement", title: "Remote temperature sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            input "customRemoteTempSensor", "bool", title: "Select separate remote sensor for each schedule", required: false, submitOnChange: true
            input "threshold", "decimal", title: "Temperature swing (precision)", defaultValue: "1.0", required: true // , range: "0.5..5.0" causes Android 2.0.7 to crash, TODO: add this in later
        }

        if (!(coolers || heaters)) {
            section("Switch HVAC mode (auto to cool/heat) based on the outside temperature (optional)", hidden: (outsideTemperatureSensor ? false : true), hideable: true) {
                input "outsideTemperatureSensor", "capability.temperatureMeasurement", title: "Outside sensor", required: false, multiple:false, submitOnChange: true
                input "temperatureH", "number", title: "Switch to heating temperature", required: (outsideTemperatureSensor ? true : false), description: "Temperature below which switch to heat mode"
                input "temperatureC", "number", title: "Switch to cooling temperature", required: (outsideTemperatureSensor ? true : false), description: "Temperature above which switch to cool mode"
            }
        }
        
        section("Operating Modes (optional)") {
            mode title: "Enable temperature control only when in this mode(s)", required: false, multiple: true
        }
        
        section() {
            label title: "Assign a name for this SmartApp (optional)", required: false
            input name: "disableUpdateNotifications", title: "Don't check for new versions of the app", type: "bool", required: false
        }
    }
}

def scheduleWeek() {
    dynamicPage(name: "scheduleWeek", title: "Configure Thermostat Schedule", install: true, uninstall: true) {
        section("Monday to Friday Schedule", hidden: false, hideable: true) {
            input "time1", "time", title: "Wake Time", required: true
            input "tempHSetpoint1", "number", title: "Wake Heat Temp", required: true
            input "tempCSetpoint1", "number", title: "Wake Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode1", "enum", title: "Wake Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor1*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor1", "capability.temperatureMeasurement", title: "Wake Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time2", "time", title: "Leave Time", required: true
            input "tempHSetpoint2", "number", title: "Leave Heat Temp", required: true
            input "tempCSetpoint2", "number", title: "Leave Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode2", "enum", title: "Leave Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor2*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor2", "capability.temperatureMeasurement", title: "Leave Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time3", "time", title: "Return Time", required: true
            input "tempHSetpoint3", "number", title: "Return Heat Temp", required: true
            input "tempCSetpoint3", "number", title: "Return Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode3", "enum", title: "Return Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor3*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor3", "capability.temperatureMeasurement", title: "Return Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time4", "time", title: "Sleep Time", required: true
            input "tempHSetpoint4", "number", title: "Sleep Heat Temp", required: true
            input "tempCSetpoint4", "number", title: "Sleep Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode4", "enum", title: "Sleep Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor4*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor4", "capability.temperatureMeasurement", title: "Sleep Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
        }
        section("Saturday and Sunday Schedule", hidden: false, hideable: true) {
            input "time11", "time", title: "Wake Time", required: true
            input "tempHSetpoint11", "number", title: "Wake Heat Temp", required: true
            input "tempCSetpoint11", "number", title: "Wake Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode11", "enum", title: "Wake Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor11*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor11", "capability.temperatureMeasurement", title: "Wake Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time21", "time", title: "Leave Time", required: true
            input "tempHSetpoint12", "number", title: "Leave Heat Temp", required: true
            input "tempCSetpoint12", "number", title: "Leave Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode12", "enum", title: "Leave Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor12*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor12", "capability.temperatureMeasurement", title: "Leave Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time31", "time", title: "Return Time", required: true
            input "tempHSetpoint13", "number", title: "Return Heat Temp", required: true
            input "tempCSetpoint13", "number", title: "Return Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode13", "enum", title: "Return Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor13*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor13", "capability.temperatureMeasurement", title: "Return Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
            paragraph ""
            input "time41", "time", title: "Sleep Time", required: true
            input "tempHSetpoint14", "number", title: "Sleep Heat Temp", required: true
            input "tempCSetpoint14", "number", title: "Sleep Cool Temp", required: true
            if (!(coolers || heaters)) {
                input "fanMode14", "enum", title: "Sleep Fan Mode", required: false, multiple:false, options: fanModes()
            }
            if (customRemoteTempSensor) {
                if ((remoteTemperatureSensor14*.currentTemperature)?.count { it } > 1) {
                    paragraph title: "You have selected multiple remote sensors, the average temperature across the sensors will be used", required: true, ""
                }
                input "remoteTemperatureSensor14", "capability.temperatureMeasurement", title: "Sleep Remote Temp Sensor", required: ((coolers || heaters) ? true : false), multiple: true, submitOnChange: true
            }
        }
    }
}

// Globals
private getMIN_HEAT_TEMP_F() { 45 }
private getMAX_HEAT_TEMP_F() { 90 }
private getMIN_COOL_TEMP_F() { 60 }
private getMAX_COOL_TEMP_F() { 95 }
private getMIN_HEAT_TEMP_C() { 8 }
private getMAX_HEAT_TEMP_C() { 32 }
private getMIN_COOL_TEMP_C() { 15 }
private getMAX_COOL_TEMP_C() { 35 }

def fanModes() {
    return ["Auto", "On", "Circulate"]
}

def installed()
{
    log.debug "Installed"

    subscribeToEvents()
}

def updated()
{
    log.debug "Updated"

    unsubscribe()
    unschedule()
    subscribeToEvents()
}

def subscribeToEvents() {
    subscribe(location, "mode", modeChangeHandler) // Reinitailize the temperature and timers when the correct mode is enabled (since we don't use dynamic preferences, the timers won't fire and temp won't change in a mode not selected, so we need to reset it all on the correct mode)
    subscribe(outsideTemperatureSensor, "temperature", outsideTemperatureHandler) // Handle changes to thermostat operating mode based on external temperature
    if (customRemoteTempSensor) {
        subscribe(remoteTemperatureSensor1, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor2, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor3, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor4, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor11, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor12, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor13, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
        subscribe(remoteTemperatureSensor14, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
    } else {
        subscribe(remoteTemperatureSensor, "temperature", remoteChangeHandler) // Handle changes in remote temperature sensor and readjust thermostat AND also kick start timer (dual role)
    }
    subscribe(thermostats, "heatingSetpoint", thermostatSetTempHandler) // Handle changes in manual thermostat heating setpoint temperature changes for Hold mode
    subscribe(thermostats, "coolingSetpoint", thermostatSetTempHandler) // Handle changes in manual thermostat cooling setpoint temperature changes for Hold mode

    // Kick start timers incase it died
    /*subscribe(location, "position", kickStartTimers)
    subscribe(location, "sunset", kickStartTimers)
    subscribe(location, "sunrise", kickStartTimers)
    subscribe(location, "routineExecuted", kickStartTimers)
    subscribe(thermostats, "temperature", kickStartTimers)*/
    subscribe(app, changeHandler) // Capture user intent to reinitialize timers
    runEvery5Minutes(heartBeat) // Since we have a heartbeat we don't need kick start timers

    // Check for new versions of the code
    def random = new Random()
    Integer randomHour = random.nextInt(18-10) + 10
    Integer randomDayOfWeek = random.nextInt(7-1) + 1 // 1 to 7
    schedule("0 0 " + randomHour + " ? * " + randomDayOfWeek, checkForCodeUpdate) // Check for code updates once a week at a random day and time between 10am and 6pm

    initialize()
}

// Heartbeat to check if the app timed out while trying to set the temp and died
def heartBeat() {
    log.trace "Thermostat heartbeat called, checking if the last temperature change was successfully completed"
    if (!state.tempSetSuccess) {
        log.warn "Last temperature change was NOT successful, reinitializing thermostat"
        initialize() // Set the temperature since we had a failure to set the temp the last time it was programmed
    }
}

// Reinitialize app on user request
def changeHandler(evt) {
    log.debug "Reinitializing thermostat timer on user request, name: ${evt?.name}, value: ${evt?.value}, Description: ${evt?.descriptionText}"
    initialize()
}

// Reinitialize timers only (don't set temperature otherwise you may end up overriding manual adjustments)
def kickStartTimers(evt) {
    log.debug "Reinitializing thermostat timer on event notification, name: ${evt?.name}, value: ${evt?.value}, Description: ${evt?.descriptionText}"
    initialize(!state.tempSetSuccess) // Only kick start timers, set the temperature only if we had a failure to set the temp the last time it was programmed
}

// Reinitialize the current temperature and timers after a mode change, this is to workaround the issue of the last timer firing while in a non running mode, resume operations when supported modes are set
def modeChangeHandler(evt) {
    log.debug "Reinitializing thermostats on mode change notification, name: ${evt.name}, value: ${evt.value}"

    initialize()
}

// Handle manual changes in thermostat setpoint for temporary Hold mode when using remote sensors
def thermostatSetTempHandler(evt) {
    log.debug "Recevied temperature set notification from ${evt.device.displayName}, name: ${evt.name}, value: ${evt.value}"

	// Check if we have a remote temperature sensor attached to this thermostat, if not we don't need to do anything
    def sch = setSchedule()
    def remoteTempSensor
    if (customRemoteTempSensor) {
        remoteTempSensor = settings."remoteTemperatureSensor${sch}"
    } else {
        remoteTempSensor = remoteTemperatureSensor
    }

    // Lets see if the temperatue is different from the scheduled temperature and see if we are in hold more or not
    def coolingSetpoint = settings."tempCSetpoint${sch}"
    def heatingSetpoint = settings."tempHSetpoint${sch}"
    def locationScale = getTemperatureScale()
    def maxCTemp
    def minCTemp
    def maxHTemp
    def minHTemp
    if (locationScale == "C") {
        minCTemp = MIN_COOL_TEMP_C // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
        maxCTemp = MAX_COOL_TEMP_C // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
        minHTemp = MIN_HEAT_TEMP_C // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
        maxHTemp = MAX_HEAT_TEMP_C // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
        log.trace "Location is in Celsius, MaxHeatTemp $maxHTemp, MinHeatTemp $minHTemp, MaxCoolTemp $maxCTemp, MinCoolTemp $minCTemp for thermostat"
    } else {
        minCTemp = MIN_COOL_TEMP_F // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
        maxCTemp = MAX_COOL_TEMP_F // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
        minHTemp = MIN_HEAT_TEMP_F // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
        maxHTemp = MAX_HEAT_TEMP_F // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
        log.trace "Location is in Farenheit, MaxHeatTemp $maxHTemp, MinHeatTemp $minHTemp, MaxCoolTemp $maxCTemp, MinCoolTemp $minCTemp for thermostat"
    }

    // Check if the see temperature is any of the set heat/cold or mix/min settings, otherwise it's a manual adjustment and we should be in temporary hold mode
    if ((evt.name == "coolingSetpoint" ? [coolingSetpoint, minCTemp, maxCTemp] : [heatingSetpoint, minHTemp, maxHTemp]).any { it == (evt.value as Integer)}) {
        log.trace "${remoteTempSensor ? 'Found ' + remoteTempSensor + ' remote temperature sensor connected to thermostat.' : ''}Thermostat ${evt.device.displayName} set to scheduled setpoint ${evt.value} for ${evt.name}, disabling temporary hold"
        atomicState."holdTemp${evt.device}" = false
    } else {
        log.info "${remoteTempSensor ? 'Found ' + remoteTempSensor + ' remote temperature sensor connected to thermostat.' : ''}Thermostat ${evt.device.displayName} set to manual setpoint ${evt.value} for ${evt.name}, enabling temporary hold"
        atomicState."holdTemp${evt.device}" = true
    }
}

// Handle remote temp sensor, kick start timer and set temperature if using a remote sensor
def remoteChangeHandler(evt) {
    log.debug "Reinitializing thermostats on remote sensor temp change notification, name: ${evt.name}, value: ${evt.value}"

    changeTemp(setSchedule())
}

// This section sets the HVAC mode based outside temperature. HVAC fan mode is set to "auto".
def outsideTemperatureHandler(evt) {
    log.debug "Heat mode switch temperature $temperatureH, cool mode switch temperature $temperatureC"

    if (temperatureH == null || temperatureC == null) { // We are in Auto mode or user doesn't want us to switch modes
        return
    }

    thermostats.each { thermostat ->
        def extTemp = outsideTemperatureSensor.currentTemperature
        log.debug "External temperature is: $extTemp"
        def thermostatState = thermostat.currentThermostatMode
        def thermostatFan = thermostat.currentThermostatFanMode
        log.debug "HVAC current mode $thermostatState"
        log.debug "HVAC Fan current mode $thermostatFan"
        if (extTemp < temperatureH) {
            if (thermostatState == "cool") {
                def hvacmode = "heat"
                thermostat.setThermostatMode(hvacmode)
                log.debug "HVAC mode set to $hvacmode"
            }
        }
        else if (extTemp > temperatureC) {
            if (thermostatState == "heat") {
                def hvacmode = "cool"
                thermostat.setThermostatMode(hvacmode)
                log.debug "HVAC mode set to $hvacmode"
            }
        }

        if (thermostatFan != "fanAuto") {
            thermostat.setThermostatFanMode("auto")
            log.debug "HVAC fan mode set to auto"
        }
    }
}

// This function set the temperature and schedules the next change (if setTemp is false then it just sets the next schedule, i.e. kickStart timer)
def initialize(def setTemp = true) { // By default we change the temp and set the timer
    log.trace "Initialized with $settings"
    log.trace "Request to set temperature = $setTemp"

    state.tempSetSuccess = false // Set the baseline and check if we finish
    def sch = setSchedule() // Set the next schedule timer
    if(setTemp) {
        // Reset hold status of all thermostats
        thermostats.each { thermostat ->
            log.trace "Resetting hold status of $thermostat"
            atomicState."holdTemp${thermostat}" = false
        }
        changeTemp(sch)
    }
    state.tempSetSuccess = true // We are done here!
}

private setSchedule() {
    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        log.error "Hub timeZone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
        sendPush "Hub timeZone not set, using ${timeZone.getDisplayName()} timezone. Please set Hub location and timezone for the codes to work accurately"
    }

    def calendar = Calendar.getInstance()
    calendar.setTimeZone(timeZone)
    def today = calendar.get(Calendar.DAY_OF_WEEK)
    def timeNow = now() + 60*1000 // Give it a buffer of 60 seconds ahead since the new Ticker scheduler randomizes the times slightly and just in case we get called earlier then scheduled time as it won't run again
    def midnightToday = timeToday("2000-01-01T23:59:59.999-0000", timeZone)
    log.trace("Current time is ${(new Date(timeNow)).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
    log.trace("Midnight today is ${midnightToday.format("EEE MMM dd yyyy HH:mm z", timeZone)}")
    log.trace("Weekday schedule1 ${timeToday(time1, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule2 ${timeToday(time2, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule3 ${timeToday(time3, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekday schedule4 ${timeToday(time4, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule1 ${timeToday(time11, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule2 ${timeToday(time21, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule3 ${timeToday(time31, timeZone).format("HH:mm z", timeZone)}")
    log.trace("Weekend schedule4 ${timeToday(time41, timeZone).format("HH:mm z", timeZone)}")

    // This section is where the time/temperature schedule is set
    switch (today) {
        case Calendar.MONDAY:
        case Calendar.TUESDAY:
        case Calendar.WEDNESDAY:
        case Calendar.THURSDAY:
            if (timeNow >= timeToday(time1, timeZone).time && timeNow < timeToday(time2, timeZone).time) { // Are we between 1st time and 2nd time
                nextRun(timeToday(time2, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 1
            }
            else if (timeNow >= timeToday(time2, timeZone).time && timeNow < timeToday(time3, timeZone).time) { // Are we between 2nd time and 3rd time
                nextRun(timeToday(time3, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 2
            }
            else if (timeNow >= timeToday(time3, timeZone).time && timeNow < timeToday(time4, timeZone).time) { // Are we between 3rd time and 4th time
                nextRun(timeToday(time4, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 3
            }
            else if (timeNow >= timeToday(time4, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule next day
                nextRun(timeToday(time1, timeZone) + 1, initialize)
                log.info("Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 4
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time1, timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
                nextRun(timeToday(time1, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 4
            }
            break

        case Calendar.FRIDAY:
            if (timeNow >= timeToday(time1, timeZone).time && timeNow < timeToday(time2, timeZone).time) { // Are we between 1st time and 2nd time
                nextRun(timeToday(time2, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time2, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 1
            }
            else if (timeNow >= timeToday(time2, timeZone).time && timeNow < timeToday(time3, timeZone).time) { // Are we between 2nd time and 3rd time
                nextRun(timeToday(time3, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time3, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 2
            }
            else if (timeNow >= timeToday(time3, timeZone).time && timeNow < timeToday(time4, timeZone).time) { // Are we between 3rd time and 4th time
                nextRun(timeToday(time4, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time4, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 3
            }
            else if (timeNow >= timeToday(time4, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Friday and midnight, we schedule Saturday
                nextRun(timeToday(time11, timeZone) + 1, initialize)
                log.info("Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 4
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time11, timeZone).time) { // Are we between midnight Friday and 1st time on Saturday, we schedule Saturday
                nextRun(timeToday(time11, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 4
            }
            break

        case Calendar.SATURDAY:
            if (timeNow >= timeToday(time11, timeZone).time && timeNow < timeToday(time21, timeZone).time) { // Are we between 1st time and 2nd time
                nextRun(timeToday(time21, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 11
            }
            else if (timeNow >= timeToday(time21, timeZone).time && timeNow < timeToday(time31, timeZone).time) { // Are we between 2nd time and 3rd time
                nextRun(timeToday(time31, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 12
            }
            else if (timeNow >= timeToday(time31, timeZone).time && timeNow < timeToday(time41, timeZone).time) { // Are we between 3rd time and 4th time
                nextRun(timeToday(time41, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 13
            }
            else if (timeNow >= timeToday(time41, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time and midnight, schedule the next day
                nextRun(timeToday(time11, timeZone) + 1, initialize)
                log.info("Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${(timeToday(time11, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 14
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time11, timeZone).time) { // Are we between midnight yesterday and 1st time, schedule today
                nextRun(timeToday(time11, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time11, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 14
            }
            break

        case Calendar.SUNDAY:
            if (timeNow >= timeToday(time11, timeZone).time && timeNow < timeToday(time21, timeZone).time) { // Are we between 1st time and 2nd time
                nextRun(timeToday(time21, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time21, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 11
            }
            else if (timeNow >= timeToday(time21, timeZone).time && timeNow < timeToday(time31, timeZone).time) { // Are we between 2nd time and 3rd time
                nextRun(timeToday(time31, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time31, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 12
            }
            else if (timeNow >= timeToday(time31, timeZone).time && timeNow < timeToday(time41, timeZone).time) { // Are we between 3rd time and 4th time
                nextRun(timeToday(time41, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time41, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 13
            }
            else if (timeNow >= timeToday(time41, timeZone).time && timeNow < midnightToday.time) { // Are we between 4th time Sunday and midnight, we schedule Monday
                nextRun(timeToday(time1, timeZone) + 1, initialize)
                log.info("Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${(timeToday(time1, timeZone) + 1).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 14
            }
            else if (timeNow >= (midnightToday - 1).time && timeNow < timeToday(time1, timeZone).time) { // Are we between midnight Sunday and 1st time on Monday, we schedule Monday
                nextRun(timeToday(time1, timeZone), initialize)
                log.info("Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                //sendNotificationEvent("Scheduled next adjustment for ${timeToday(time1, timeZone).format("EEE MMM dd yyyy HH:mm z", timeZone)}")
                return 14
            }
            break
            
        default:
        	log.error "Unknown Day of Week: $today"
            break
    }
}

// This section is where the thermostat temperature settings are set. 
private void changeTemp(sch) {
    if (coolers || heaters) { // HEATING/COOLING APPLIANCES
        def coolingSetpoint = settings."tempCSetpoint${sch}"
        def heatingSetpoint = settings."tempHSetpoint${sch}"
        def remoteTempSensor

        if (customRemoteTempSensor) {
            remoteTempSensor = settings."remoteTemperatureSensor${sch}"
        } else {
            remoteTempSensor = remoteTemperatureSensor
        }

        log.trace "Heating/Cooling appliance mode: Target Heat: $heatingSetpoint°, Target Cool: $coolingSetpoint°, Remote Temp Sensor(s): $remoteTempSensor"

        // Check for invalid configuration
        if (heatingSetpoint > coolingSetpoint) {
            log.error "INVALID CONFIGURATION: Target Heat temperature: $heatingSetpoint° is GREATER than Target Cool temperature: $coolingSetpoint°"
            sendPush("INVALID CONFIGURATION: Target Heat temperature: $heatingSetpoint° is GREATER than Target Cool temperature: $coolingSetpoint°")
            log.error "Not changing settings on appliances, correct the SmartApp settings"
            return
        }

        def currentTemp = (remoteTempSensor*.currentTemperature).sum()/(remoteTempSensor*.currentTemperature).count { it } // Take the average temp of the remote temperature sensor(s) (manage transition from legacy code to new code)
        log.trace("Remote Sensor(s) Current Temp (Average): $currentTemp°, Swing Threshold: $threshold")

        // Cooling first
        if ((currentTemp - coolingSetpoint) > threshold) { // Turn cool on
            coolers.each { cooler ->
                if (cooler.currentValue("switch") != "on") {
                    cooler.on()
                    log.info "Turning Cooling appliance $cooler ON, Target: $coolingSetpoint°"
                }
            }
            heaters.each { heater ->
                if (heater.currentValue("switch") != "off") {
                    heater.off()
                    log.info "Turning Heating appliance $heater OFF"
                }
            }
        } else if ((heatingSetpoint - currentTemp) > threshold) { // Heating second (order is important to avoid constant switching)
            coolers.each { cooler ->
                if (cooler.currentValue("switch") != "off") {
                    cooler.off()
                    log.info "Turning Cooling appliance $cooler OFF"
                }
            }
            heaters.each { heater ->
                if (heater.currentValue("switch") != "on") {
                    heater.on()
                    log.info "Turning Heating appliance $heater ON, Target: $heatingSetpoint°"
                }
            }
        } else if (((coolingSetpoint - currentTemp) > threshold) || ((currentTemp - heatingSetpoint) > threshold)) { // Turn off - don't check valid mode
            coolers.each { cooler ->
                if (cooler.currentValue("switch") != "off") {
                    cooler.off()
                    log.info "Turning Cooling appliance $cooler OFF"
                }
            }
            heaters.each { heater ->
                if (heater.currentValue("switch") != "off") {
                    heater.off()
                    log.info "Turning Heating appliance $heater OFF"
                }
            }
        }
    } else { // THERMOSTATS
        thermostats.each { thermostat ->
            def fanMode = settings."fanMode${sch}"
            def coolingSetpoint = settings."tempCSetpoint${sch}"
            def heatingSetpoint = settings."tempHSetpoint${sch}"
            def thermostatState = thermostat.currentThermostatMode
            def thermostatCurrentHeating = thermostat.currentValue("heatingSetpoint")
            def thermostatCurrentCooling = thermostat.currentValue("coolingSetpoint")
            def remoteTempSensor

            if (customRemoteTempSensor) {
                remoteTempSensor = settings."remoteTemperatureSensor${sch}"
            } else {
                remoteTempSensor = remoteTemperatureSensor
            }

            log.trace "Thermostat mode: $thermostatState, Current Heating: $thermostatCurrentHeating°, Target Heat: $heatingSetpoint°, Current Cooling: $thermostatCurrentCooling°, Target Cool: $coolingSetpoint°, Remote Temp Sensor(s): $remoteTempSensor"

            // Check for invalid configuration
            if ((thermostatState == "auto") && (heatingSetpoint > coolingSetpoint)) {
                log.error "INVALID CONFIGURATION: Target Heat temperature: $heatingSetpoint° is GREATER than Target Cool temperature: $coolingSetpoint°"
                sendPush("INVALID CONFIGURATION: Target Heat temperature: $heatingSetpoint° is GREATER than Target Cool temperature: $coolingSetpoint°")
                log.error "Not changing temperature settings on thermostat, correct the SmartApp settings"
                return
            }

            // If thermostat is on temporary hold and ignore it
            if (atomicState."holdTemp${thermostat}") { // If we are on hold temp mode then ignore temperature changes since user has put it on hold mode
                log.info "Thermostat ${thermostat} is in hold temperature mode, not making any changes to thermostat based on remote temp sensor"
                return
            }

            if (remoteTempSensor) { // Remote temperature sensor
                def locationScale = getTemperatureScale()
                def maxCTemp
                def minCTemp
                def maxHTemp
                def minHTemp
                if (locationScale == "C") {
                    minCTemp = MIN_COOL_TEMP_C // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                    maxCTemp = MAX_COOL_TEMP_C // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                    minHTemp = MIN_HEAT_TEMP_C // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                    maxHTemp = MAX_HEAT_TEMP_C // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                    log.trace "Location is in Celsius, MaxHeatTemp $maxHTemp, MinHeatTemp $minHTemp, MaxCoolTemp $maxCTemp, MinCoolTemp $minCTemp for thermostat"
                } else {
                    minCTemp = MIN_COOL_TEMP_F // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                    maxCTemp = MAX_COOL_TEMP_F // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                    minHTemp = MIN_HEAT_TEMP_F // minimum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to minimum)
                    maxHTemp = MAX_HEAT_TEMP_F // maximum temperature (thermostat could be in a different room at different temp or not updated very often so inaccurate hence to set to maximum)
                    log.trace "Location is in Farenheit, MaxHeatTemp $maxHTemp, MinHeatTemp $minHTemp, MaxCoolTemp $maxCTemp, MinCoolTemp $minCTemp for thermostat"
                }

                def currentTemp = (remoteTempSensor*.currentTemperature).sum()/(remoteTempSensor*.currentTemperature).count { it } // Take the average temp of the remote temperature sensor(s) (manage transition from legacy code to new code)
                log.trace("Remote Sensor(s) Current Temp (Average): $currentTemp°, Swing Threshold: $threshold")

                if (thermostatState == "auto") {
                    // Cooling first
                    if ((currentTemp - coolingSetpoint) > threshold) { // Turn cool on
                        if (thermostatCurrentCooling != minCTemp) {
                            thermostat.setCoolingSetpoint(minCTemp) // Set to cool
                        }
                        if (thermostatCurrentHeating != minHTemp) {
                            thermostat.setHeatingSetpoint(minHTemp) // Disable heat
                        }
                        log.info "Cooling ON, Thermostat Cool: ${minCTemp}, Target: $coolingSetpoint°"
                    } else if ((heatingSetpoint - currentTemp) > threshold) { // Heating second (order is important to avoid constant switching)
                        if (thermostatCurrentHeating != maxHTemp) {
                            thermostat.setHeatingSetpoint(maxHTemp) // Set to heat
                        }
                        if (thermostatCurrentCooling != maxCTemp) {
                            thermostat.setCoolingSetpoint(maxCTemp) // Disable cool
                        }
                        log.info "Heating ON, Thermostat Heat: ${maxHTemp}, Target: $heatingSetpoint°"
                    } else if (((coolingSetpoint - currentTemp) > threshold) || ((currentTemp - heatingSetpoint) > threshold)) { // Turn off - don't check valid mode
                        if (thermostatCurrentCooling != maxCTemp) {
                            thermostat.setCoolingSetpoint(maxCTemp) // Disable cool
                        }
                        if (thermostatCurrentHeating != minHTemp) {
                            thermostat.setHeatingSetpoint(minHTemp) // Disable heat
                        }
                        log.info "HVAC OFF, Thermostat Cool: ${maxCTemp}, Thermostat Heat: ${minHTemp}"
                    }
                } else if (thermostatState == "cool") {
                    // air conditioner
                    if ((currentTemp - coolingSetpoint) > threshold) { // Turn cool on
                        if (thermostatCurrentCooling != minCTemp) {
                            thermostat.setCoolingSetpoint(minCTemp) // Set to cool
                        }
                        log.info "Cooling ON, Thermostat: ${minCTemp}, Target: $coolingSetpoint°"
                    } else if ((coolingSetpoint - currentTemp) > threshold) { // Turn cool off - don't check valid mode
                        if (thermostatCurrentCooling != maxCTemp) {
                            thermostat.setCoolingSetpoint(maxCTemp) // Disable cool
                        }
                        log.info "Cooling OFF, Thermostat Cool: ${maxCTemp}"
                    }
                } else {
                    // Heater or emergency heater
                    if ((heatingSetpoint - currentTemp) > threshold) {
                        if (thermostatCurrentHeating != maxHTemp) {
                            thermostat.setHeatingSetpoint(maxHTemp) // Set to heat
                        }
                        log.info "Heating ON, Thermostat: ${maxHTemp}, Target: $heatingSetpoint°"
                    } else if ((currentTemp - heatingSetpoint) > threshold) { // Disable heat - don't check valid mode
                        if (thermostatCurrentHeating != minHTemp) {
                            thermostat.setHeatingSetpoint(minHTemp) // Disable heat
                        }
                        log.info "Heating OFF, Thermostat Heat: ${minHTemp}"
                    }
                }
            } else { // Local thermostat
                if (thermostatState == "auto") {
                    def msg = ""
                    if (thermostatCurrentHeating != heatingSetpoint) {
                        thermostat.setHeatingSetpoint(heatingSetpoint)
                        msg += "Set $thermostat Heat ${heatingSetpoint}°"
                    }
                    if (thermostatCurrentCooling != coolingSetpoint) {
                        thermostat.setCoolingSetpoint(coolingSetpoint)
                        if (msg) {
                            msg += "Set $thermostat Cool ${coolingSetpoint}°"
                        } else {
                            msg += ", Cool ${coolingSetpoint}°"
                        }
                    }
                    if (msg) {
                        log.info msg
                    }
                } else if (thermostatState == "cool") {
                    if (thermostatCurrentCooling != coolingSetpoint) {
                        thermostat.setCoolingSetpoint(coolingSetpoint)
                        log.info "Set $thermostat Cool ${coolingSetpoint}°"
                    }
                } else { // heater or emergency heater
                    if (thermostatCurrentHeating != heatingSetpoint) {
                        thermostat.setHeatingSetpoint(heatingSetpoint)
                        log.info "Set $thermostat Heat ${heatingSetpoint}°"
                    }
                }
            }

            // Set fan mode
            if (fanMode) {
                setFanMode(thermostat, fanMode)
            } else {
                log.trace "No fan mode selected skipping setting fan mode"
            }
        }
    }
}

private setFanMode(thermostat, fanMode) {
    def fanState = thermostat.currentThermostatFanMode
    log.trace "$thermostat Fan state: $fanState, Target fan mode: $fanMode"
    
    switch (fanMode) {
        case "Auto":
        	if (fanState != "fanAuto") {
                thermostat.fanAuto()
                log.info "Setting $thermostat fan mode to Auto"
            }
            break
            
        case "On":
        	if (fanState != "fanOn") {
                thermostat.fanOn()
                log.info "Setting $thermostat fan mode to Auto"
            }
        	break
            
        case "Circulate":
        	if (fanState != "fanCirculate") {
                thermostat.fanCirculate()
                log.info "Setting $thermostat fan mode to Auto"
            }
        	break
            
        default:
            log.error "Invalid fan mode selected: $fanMode"
        	break
    }
}

private nextRun(dateTime, handler) {
    schedule(dateTime, handler) // Use schedule instead of runOnce since the scheduler sometimes drops runOnce and wont' pick it up, schedule will be picked up again
}

def checkForCodeUpdate(evt) {
    log.trace "Getting latest version data from the RBoy Apps server"
    
    def appName = "5-2 Day Thermostat with Remote Sensor"
    def serverUrl = "http://smartthings.rboyapps.com"
    def serverPath = "/CodeVersions.json"
    
    try {
        httpGet([
            uri: serverUrl,
            path: serverPath
        ]) { ret ->
            log.trace "Received response from RBoy Apps Server, headers=${ret.headers.'Content-Type'}, status=$ret.status"
            //ret.headers.each {
            //    log.trace "${it.name} : ${it.value}"
            //}

            if (ret.data) {
                log.trace "Response>" + ret.data
                
                // Check for app version updates
                def appVersion = ret.data?."$appName"
                if (appVersion > clientVersion()) {
                    def msg = "New version of app ${app.label} available: $appVersion, current version: ${clientVersion()}.\nPlease visit $serverUrl to get the latest version."
                    log.info msg
                    if (!disableUpdateNotifications) {
                        sendPush(msg)
                    }
                } else {
                    log.trace "No new app version found, latest version: $appVersion"
                }
                
                // Check device handler version updates
                def caps = 
                [ thermostats,
                 remoteTempertureSensor1,
                 remoteTempertureSensor2,
                 remoteTempertureSensor3,
                 remoteTempertureSensor4,
                 remoteTempertureSensor11,
                 remoteTempertureSensor12,
                 remoteTempertureSensor13,
                 remoteTempertureSensor14,
                 outsideTemperatureSensor ]
                caps?.each {
                    def devices = it?.findAll { it.hasAttribute("codeVersion") }
                    for (device in devices) {
                        if (device) {
                            def deviceName = device?.currentValue("dhName")
                            def deviceVersion = ret.data?."$deviceName"
                            if (deviceVersion && (deviceVersion > device?.currentValue("codeVersion"))) {
                                def msg = "New version of device ${device?.displayName} available: $deviceVersion, current version: ${device?.currentValue("codeVersion")}.\nPlease visit $serverUrl to get the latest version."
                                log.info msg
                                if (!disableUpdateNotifications) {
                                    sendPush(msg)
                                }
                            } else {
                                log.trace "No new device version found for $deviceName, latest version: $deviceVersion, current version: ${device?.currentValue("codeVersion")}"
                            }
                        }
                    }
                }
            } else {
                log.error "No response to query"
            }
        }
    } catch (e) {
        log.error "Exception while querying latest app version: $e"
    }
}
